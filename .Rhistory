The set of principal components that explain the data effectively ,is chosen as the new feature set. The PCA process can be explained briefly in the following steps.
Let *X* be a matrix that represents the set of features that we are running PCA on. Each column in this matrix represents a feature.
*  __Step 1__ : Subtract each column by its mean and divide it by the standard deviation.
*  __Step 2__ : Let the new normalized matrix be *Z* . Using this normalized matrix , calculate the covariance matrix ie Z<sup>T</sup>Z . Let this covariance matrix be *C*
*  __Step 3__ : Decompose the covariance matrix into eigen values and eigen vectors. Here the `eigen()` function is used. The eigen vector corresponding to the highest eigen value is the direction of maximum variance.
*  __Step 4__ : To acquire the principal components, arrange the eigen values in descending order and reorder the eigen vectors accordingly. This reordering is taken care of by the `eigen()` function.
*  __Step 5__ : Now that we have the directions along which the variance is maximum, we need to project them on the data that we have to create the features. This is achieved by multiplying the scaled feature matrix *Z* with the reordered eigen matrix. The explained variance of each component is the eigen value corresponding to that component divided by the sum of eigen values.
These steps are encapsulated via the `pca_function()` that is defined below. This function returns the following
1. The projected vectors
2. The explained variance of these projected vectors
3. The directions along which the data is projected.
```{r}
pca_function <- function(x,k){
# x is the input data frame
## Step 1 Normalize each column
x_scaled <- scale(x)
## Convert the data frame to a matrix
x_mat <- as.matrix(x_scaled)
## Calculate the covariance matrix
cov_x <- t(x_mat) %*% x_mat
## Eigen Value decomposition
decomp_eigen <- eigen(cov_x)
eigen_values <- decomp_eigen$values
eigen_vectors <- decomp_eigen$vectors
# choose top k eigen values and explain the variance
eigen_values <- eigen_values[1:k]
## calculate the projected vectors
projected_vectors <- x_mat %*% eigen_vectors
projected_vectors <- projected_vectors[1:nrow(projected_vectors),1:k]
return(list(projected_vectors=projected_vectors,eigen_values=eigen_values,basis_vectors=eigen_vectors))
}
```
## Choosing the Best K
Its good to visualize the optimal number of principal components by looking how well they explain the data. Consecutive principal components explain lesser and lesser of the variance.
```{r}
## removing the redundant columns
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
data_raw$activity <- ifelse(grepl('walking',tolower(data_raw$activity)),'WALKING',data_raw$activity)
data_raw_pca <- data_raw %>% select(-rn,-activity)
train_index <- sample(1:nrow(data_raw_pca),0.75*nrow(data_raw_pca))
data_raw_pca_train <- data_raw_pca[train_index,]
data_raw_pca_test <- data_raw_pca[-train_index,]
pca_decomposed_data <- pca_function(data_raw_pca_train,561)
```
```{r}
## Convert to a data frame
options(scipen = 999)
eigen_values_and_vectors <- data.frame(principal_component = 1:ncol(data_raw_pca_train),eigen_values = pca_decomposed_data$eigen_values)
eigen_values_and_vectors %>%
mutate(var = eigen_values/sum(eigen_values)) %>%
mutate(cumulative_var = cumsum(var))
```
The first 68 principal components explain about 90% of the variance in the data. Let's apply this transformation and choose the first 68 principal components. We will then use these principal components in our multinomial logistic regression model.
```{r}
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
```
Multinomial logistic regression models help in deriving the log odds of an event happening against a base event. This is example, the base event is chosen as `SITTING`.
```{r}
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
```
```{r}
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$test,real_pred_test$real)
```
###  Redefine the problem
```{r}
```
## Convert to a data frame
options(scipen = 999)
eigen_values_and_vectors <- data.frame(principal_component = 1:ncol(data_raw_pca_train),eigen_values = pca_decomposed_data$eigen_values)
eigen_values_and_vectors %>%
mutate(var = eigen_values/sum(eigen_values)) %>%
mutate(cumulative_var = cumsum(var))
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
pca_final_train <- pca_function(data_raw_pca_train,50)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
pca_final_train <- pca_function(data_raw_pca_train,50)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:50]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
pca_final_train <- pca_function(data_raw_pca_train,50)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:50]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$test,real_pred_test$real)
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$test,real_pred_test$real)
for(i in 1:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
sum(real_pred_test$real==real_pred_test$test)
}
length(real_pred_test)
length(real_pred_test$test)
for(i in 1:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
for(i in 2:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
dim(data_pca_test)
knitr::opts_chunk$set(echo = TRUE)
pca_function <- function(x,k){
# x is the input data frame
## Step 1 Normalize each column
x_scaled <- scale(x)
## Convert the data frame to a matrix
x_mat <- as.matrix(x_scaled)
## Calculate the covariance matrix
cov_x <- t(x_mat) %*% x_mat
## Eigen Value decomposition
decomp_eigen <- eigen(cov_x)
eigen_values <- decomp_eigen$values
eigen_vectors <- decomp_eigen$vectors
# choose top k eigen values and explain the variance
eigen_values <- eigen_values[1:k]
## calculate the projected vectors
projected_vectors <- x_mat %*% eigen_vectors
projected_vectors <- projected_vectors[1:nrow(projected_vectors),1:k]
return(list(projected_vectors=projected_vectors,eigen_values=eigen_values,basis_vectors=eigen_vectors))
}
## removing the redundant columns
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
data_raw$activity <- ifelse(grepl('walking',tolower(data_raw$activity)),'WALKING',data_raw$activity)
data_raw_pca <- data_raw %>% select(-rn,-activity)
train_index <- sample(1:nrow(data_raw_pca),0.75*nrow(data_raw_pca))
data_raw_pca_train <- data_raw_pca[train_index,]
data_raw_pca_test <- data_raw_pca[-train_index,]
pca_decomposed_data <- pca_function(data_raw_pca_train,561)
## Convert to a data frame
options(scipen = 999)
eigen_values_and_vectors <- data.frame(principal_component = 1:ncol(data_raw_pca_train),eigen_values = pca_decomposed_data$eigen_values)
eigen_values_and_vectors %>%
mutate(var = eigen_values/sum(eigen_values)) %>%
mutate(cumulative_var = cumsum(var))
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
pc_n_acc <- data.frame(number_of_pc = as.numeric(),accuracy=as.numeric())
for(i in 2:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
data_pca_test %>% names()
as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
for(i in 2:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
for(i in 2:561){
data_pca_test <- data_pca_test[,1:i]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
for(i in 2:561){
data_pca_test_temp<- data_pca_test[,1:i]
data_pca_test_temp$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test_temp %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test_temp$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
#data_pca_test <- data_pca_test[,1:100]
# data_pca_test$activity <- data_raw[-train_index,]$activity
#
# test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
# real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
pc_n_acc <- data.frame(number_of_pc = as.numeric(),accuracy=as.numeric())
for(i in 2:561){
data_pca_test_temp<- data_pca_test[,1:i]
data_pca_test_temp$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test_temp %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test_temp$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
i
data_pca_test[,1:i]
data_pca_test[,1:3]
or(i in 2:561){
for(i in 2:561){
data_pca_test_temp<- data_pca_test[,1:i]
data_pca_test_temp$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test_temp %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test_temp$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
data_pca_test[,1:34]
## testing
data_pca_test <- as.matrix(data_raw_pca_test) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
#data_pca_test <- data_pca_test[,1:100]
# data_pca_test$activity <- data_raw[-train_index,]$activity
#
# test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
# real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
pc_n_acc <- data.frame(number_of_pc = as.numeric(),accuracy=as.numeric())
for(i in 2:561){
data_pca_test_temp<- data_pca_test[,1:i]
data_pca_test_temp$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test_temp %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test_temp$activity,test=as.character(test_prediction))
cat('\n')
print("Number of Principle Components",i)
pc_n_acc <- rbind(pc_n_acc,c(i,sum(real_pred_test$real==real_pred_test$test)/length(real_pred_test$test)))
}
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
unique(data_raw$activity)
data_raw %>% group_by(activity) %>% summarise(n=n())
data_raw_pca_test %>% View()
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
real_pred_test$real==real_pred_test$test
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
## removing the redundant columns
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
data_raw_pca <- data_raw %>% select(-rn,-activity)
train_index <- sample(1:nrow(data_raw_pca),0.75*nrow(data_raw_pca))
data_raw_pca_train <- data_raw_pca[train_index,]
data_raw_pca_test <- data_raw_pca[-train_index,]
pca_decomposed_data <- pca_function(data_raw_pca_train,561)
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
real_pred_test %>% View()
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$real,real_pred_test$test)
## testing
data_pca_test <- as.matrix((data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$real,real_pred_test$test)
knitr::opts_chunk$set(echo = TRUE)
pca_function <- function(x,k){
# x is the input data frame
## Step 1 Normalize each column
x_scaled <- scale(x)
## Convert the data frame to a matrix
x_mat <- as.matrix(x_scaled)
## Calculate the covariance matrix
cov_x <- t(x_mat) %*% x_mat
## Eigen Value decomposition
decomp_eigen <- eigen(cov_x)
eigen_values <- decomp_eigen$values
eigen_vectors <- decomp_eigen$vectors
# choose top k eigen values and explain the variance
eigen_values <- eigen_values[1:k]
## calculate the projected vectors
projected_vectors <- x_mat %*% eigen_vectors
projected_vectors <- projected_vectors[1:nrow(projected_vectors),1:k]
return(list(projected_vectors=projected_vectors,eigen_values=eigen_values,basis_vectors=eigen_vectors))
}
## removing the redundant columns
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
data_raw_pca <- data_raw %>% select(-rn,-activity)
train_index <- sample(1:nrow(data_raw_pca),0.75*nrow(data_raw_pca))
data_raw_pca_train <- data_raw_pca[train_index,]
data_raw_pca_test <- data_raw_pca[-train_index,]
pca_decomposed_data <- pca_function(data_raw_pca_train,561)
## Convert to a data frame
options(scipen = 999)
eigen_values_and_vectors <- data.frame(principal_component = 1:ncol(data_raw_pca_train),eigen_values = pca_decomposed_data$eigen_values)
eigen_values_and_vectors %>%
mutate(var = eigen_values/sum(eigen_values)) %>%
mutate(cumulative_var = cumsum(var))
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$real,real_pred_test$test)
knitr::opts_chunk$set(echo = TRUE)
pca_function <- function(x,k){
# x is the input data frame
## Step 1 Normalize each column
x_scaled <- scale(x)
## Convert the data frame to a matrix
x_mat <- as.matrix(x_scaled)
## Calculate the covariance matrix
cov_x <- t(x_mat) %*% x_mat
## Eigen Value decomposition
decomp_eigen <- eigen(cov_x)
eigen_values <- decomp_eigen$values
eigen_vectors <- decomp_eigen$vectors
# choose top k eigen values and explain the variance
eigen_values <- eigen_values[1:k]
## calculate the projected vectors
projected_vectors <- x_mat %*% eigen_vectors
projected_vectors <- projected_vectors[1:nrow(projected_vectors),1:k]
return(list(projected_vectors=projected_vectors,eigen_values=eigen_values,basis_vectors=eigen_vectors))
}
## removing the redundant columns
libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv',stringsAsFactors = FALSE)
data_raw_pca <- data_raw %>% select(-rn,-activity)
train_index <- sample(1:nrow(data_raw_pca),0.75*nrow(data_raw_pca))
data_raw_pca_train <- data_raw_pca[train_index,]
data_raw_pca_test <- data_raw_pca[-train_index,]
pca_decomposed_data <- pca_function(data_raw_pca_train,561)
## Convert to a data frame
options(scipen = 999)
eigen_values_and_vectors <- data.frame(principal_component = 1:ncol(data_raw_pca_train),eigen_values = pca_decomposed_data$eigen_values)
eigen_values_and_vectors %>%
mutate(var = eigen_values/sum(eigen_values)) %>%
mutate(cumulative_var = cumsum(var))
pca_final_train <- pca_function(data_raw_pca_train,50)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:50]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$real,real_pred_test$test)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
#broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
pca_final_train <- pca_function(data_raw_pca_train,100)
data_pca_train <- as.data.frame(pca_final_train$projected_vectors)
data_pca_train$activity <- as.character(data_raw[train_index,]$activity)
library(nnet)
data_pca_train$activity <- as.factor(data_pca_train$activity)
data_pca_train$activity <- relevel(data_pca_train$activity,ref='SITTING')
model_logistic_pca <- multinom(activity~.,data=data_pca_train)
#broom::tidy(model_logistic_pca)
test <- predict(model_logistic_pca,newdata=data_pca_train %>% select(-activity))
real_pred <- data.frame(real=data_pca_train$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
## testing
data_pca_test <- as.matrix(scale(data_raw_pca_test)) %*% pca_final_train$basis_vectors
data_pca_test <- as.data.frame(data_pca_test)
data_pca_test <- data_pca_test[,1:100]
data_pca_test$activity <- data_raw[-train_index,]$activity
test_prediction <- predict(model_logistic_pca,newdata = data_pca_test %>% select(-activity))
real_pred_test <- data.frame(real=data_pca_test$activity,test=as.character(test_prediction))
caret::confusionMatrix(real_pred_test$real,real_pred_test$test)
