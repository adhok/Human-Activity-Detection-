libraries_needed <- c('tidyr','dplyr','ggplot2','caret','purrr','rlang','hrbrthemes','GGally','caret')
lapply(libraries_needed ,require,character.only=TRUE)
data_raw<- read.csv('train.csv')
dim(data_raw)
data_raw %>%
group_by(activity) %>%
summarise(Frequency=n())
list_of_variables <- data_raw %>% select(-rn,-activity) %>% names()
p_values_variables <- data.frame(variable_names=as.character(),p_values=as.numeric())
for(variable_names in list_of_variables){
### Grand Mean
mean_grand <- data_raw %>%
select_(variable_names) %>%
mutate_all(funs(mean(.,na.rm=T))) %>%
unique() %>%
pull()
### Data frame with Number of Observations within each class and mean of observations per class
mean_groups <- data_raw %>%
select_(variable_names ,'activity') %>%
group_by(activity) %>%
summarise_all(funs(mean(.,na.rm=T))) %>%
inner_join(data_raw %>% select_(variable_names ,'activity') %>% group_by(activity) %>%
summarise(n=n())) %>% ungroup() %>% as.data.frame()
## Rename the variable_names column as num_var . This is the within group mean
mean_groups$num_var <- mean_groups[,variable_names]
mean_groups <- mean_groups %>%
select(activity,num_var,n)
### Calculate The mean_sum_of_squares_between
mean_sum_of_squares_between <- mean_groups %>%
mutate(between_components = n * ((num_var - mean_grand) ^ 2)) %>% mutate(mean_squared_between =
sum(between_components) / (length(unique(
mean_groups$activity
)) - 1)) %>%
select(mean_squared_between) %>% unique() %>% pull()
### Within group variablility calculation
mean_sum_of_squares_within <- data_raw %>%
select_(variable_names ,'activity') %>%
inner_join(mean_groups) %>%
mutate(within_components= (num_var-UQ(rlang::sym(variable_names)))^2) %>%
mutate(mean_sum_of_squares= sum(within_components)/(nrow(data_raw)-length(unique(mean_groups$activity)))) %>%
select(mean_sum_of_squares) %>% unique() %>% pull()
#### F Statistic which between variability/within variability
f_stat <- mean_sum_of_squares_between/mean_sum_of_squares_within
## p - value using this F statistic
p_value <- pf(f_stat,(length(unique(
mean_groups$activity
)) - 1),(nrow(data_raw)-length(unique(mean_groups$activity))),lower.tail = F)
if(p_value<0.05){
p_value_df <- data.frame(variable_names=variable_names,p_values = p_value)
p_values_variables <- rbind(p_value_df,p_values_variables)
}
}
print(dim(p_values_variables))
options(scipen = 999)
p_values_variables %>%
ggplot(aes(x=p_values))+
geom_histogram()+
theme(panel.background=element_blank(),
panel.grid = element_line(color='#d5d5d4'),
axis.ticks = element_blank())+
labs(x='P Values',y='Frequency')
columns_to_select <- p_values_variables %>%
tidyr::spread(variable_names,p_values)
columns_to_select <- names(columns_to_select)
correlation_df <- data_raw %>%
select_(.dots=columns_to_select)
correlation_df <- correlation_df %>%
cor() %>%
as.data.frame()
correlation_df$row_names <- names(correlation_df)
number_of_variables  <- data.frame(variable_name=as.character(),number_of_variables=as.numeric())
for(col in names(correlation_df)[!grepl('row_names',names(correlation_df))]){
col <- as.character(col)
row_to_check <- correlation_df %>%
select(UQ(rlang::sym(col)),row_names) %>%
filter(abs(UQ(sym(col)))>0.5) %>% select(row_names) %>% filter(row_names!=col) %>% pull()
number_of_variables <- rbind(number_of_variables,data.frame(variable_name=col,number_of_variables=length(row_to_check)))
}
variables_needed_for_modeling <- number_of_variables %>%
filter(number_of_variables==0) %>% select(variable_name) %>% pull()
print(variables_needed_for_modeling)
columns_to_select <- p_values_variables %>%
tidyr::spread(variable_names,p_values)
columns_to_select <- names(columns_to_select)
correlation_df <- data_raw %>%
select_(.dots=columns_to_select)
correlation_df <- correlation_df %>%
cor() %>%
as.data.frame()
correlation_df$row_names <- names(correlation_df)
number_of_variables  <- data.frame(variable_name=as.character(),number_of_variables=as.numeric())
for(col in names(correlation_df)[!grepl('row_names',names(correlation_df))]){
col <- as.character(col)
row_to_check <- correlation_df %>%
select(UQ(rlang::sym(col)),row_names) %>%
filter(abs(UQ(sym(col)))>0.5) %>% select(row_names) %>% filter(row_names!=col) %>% pull()
number_of_variables <- rbind(number_of_variables,data.frame(variable_name=col,number_of_variables=length(row_to_check)))
}
variables_needed_for_modeling <- number_of_variables %>%
filter(number_of_variables==0) %>% select(variable_name) %>% pull()
print(variables_needed_for_modeling)
modeling_data <- data_raw %>%
select_(.dots=dput(as.character(variables_needed_for_modeling)),'activity')
modeling_data %>%
select(-activity) %>%
cor() %>%
corrplot::corrplot()
modeling_data <- data_raw %>%
select_(.dots=dput(as.character(variables_needed_for_modeling)),'activity')
modeling_data %>%
select(-activity) %>%
cor() %>%
corrplot::corrplot(method = 'circle',tl.pos='n')
modeling_data <- data_raw %>%
select_(.dots=dput(as.character(variables_needed_for_modeling)),'activity')
modeling_data %>%
select(-activity) %>%
cor() %>%
corrplot::corrplot(method = 'circle',tl.pos='n')
library(nnet)
modeling_data$activity <- relevel(modeling_data$activity,ref='SITTING')
model_logistic <- multinom(activity~.,data=modeling_data)
broom::tidy(model_logistic)
test <- predict(model_logistic,data=modeling_data %>% select(-activity))
sum(as.character(test)==modeling_data$activity)
