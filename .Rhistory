filter(variable %in% c('fBodyBodyGyroJerkMag.maxInds','tBodyAcc.correlation.X.Y','tBodyGyroJerk.arCoeff.Z.4','fBodyBodyGyroMag.maxInds')) %>%
mutate(pos = ifelse(increase_in_log_odds>0,'Positive','Negative')) %>%
ggplot(aes(x=variable,y=increase_in_log_odds,fill=pos))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5))+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
coeff_data_long %>%
select(.rownames,variable,increase_in_log_odds) %>%
filter(variable %in% c('fBodyBodyGyroJerkMag.maxInds','tBodyAcc.correlation.X.Y','tBodyGyroJerk.arCoeff.Z.4','fBodyBodyGyroMag.maxInds')) %>%
mutate(pos = ifelse(increase_in_log_odds>=0,'Positive','Negative')) %>%
ggplot(aes(x=variable,y=increase_in_log_odds,fill=pos))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5))+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
model_logistic
caret::getModelInfo('multinom')
caret::modelLookup('mutlinom')
caret::modelLookup('multinom')
model_logistic
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
model_cv <- caret::train(Species~.,data=iris,trControl=train_control,
method='multinom')
model_cv$results
model_cv$dots
model_cv$method
model_cv$modelInfo
model_cv$results
model_cv$pred
model_cv$bestTune
model_cv$call
model_cv$trainingData
model_cv$xlevels
model_cv$coefnames
model_cv$terms
model_cv$maximize
model_cv$preProcess
multinom(Species~.data=iris)
multinom(Species~.,data=iris)
?multinom
multinom(Species~.,data=iris,model=TRUE)
model_cv$results
library(caret)
library(nnet)
iris_data <- iris
iris_data$activity <- relevel(iris_data$activity,ref='Setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
model_cv <- caret::train(Species~.,data=iris_data,trControl=train_control,
method='multinom')
model_cv$bestTune
model_cv$resample
train_control <- trainControl(method='repeatedcv',number=10,verboseIter = TRUE)
model_cv <- caret::train(activity~.,data=modeling_data,trControl=train_control,
method='multinom')
?trainControl
train_control <- trainControl(method='cv',number=10,verboseIter = TRUE)
model_cv <- caret::train(activity~.,data=modeling_data,trControl=train_control,
method='multinom')
test_cv <- predict(model_cv,data=modeling_data %>% select(-activity))
real_pred_cv <- data.frame(real=modeling_data$activity,test_cv=as.character(test_cv))
caret::confusionMatrix(real_pred_cv$real,real_pred_cv$test_cv)
library(caret)
library(nnet)
iris_data <- iris
## Base Class against which log odds are calculated
iris_data$activity <- relevel(iris_data$activity,ref='Setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
model_cv <- caret::train(Species~.,data=iris_data,trControl=train_control,
method='multinom')
library(caret)
library(nnet)
iris_data <- iris
## Base Class against which log odds are calculated
iris_data$activity <- relevel(iris_data$activity,ref='Setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
library(caret)
library(nnet)
iris_data <- iris
iris_data$Species <- as.factor(iris_data$Species)
iris_data$Species <- as.factor(iris_data$Species)
iris_data$activity <- relevel(iris_data$activity,ref='Setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
iris_data$activity <- relevel(iris_data$activity,ref='Setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
iris_data$Species <- as.factor(iris_data$Species)
iris_data$Species <- relevel(iris_data$Species,ref='Setosa')
iris_data$Species
iris_data$Species <- relevel(iris_data$Species,ref='setosa')
train_control <- trainControl(method='repeatedcv',number=10,repeats = 10,verboseIter = TRUE)
model_cv <- caret::train(Species~.,data=iris_data,trControl=train_control,
method='multinom')
model_cv$resampledCM
model_cv$resampled
model_cv$resample
head(model_cv$resample,10)
## Implementing cv from scratch
## shuffle the data
random_data <- dplyr::slice(random_data,sample(1:n()))
## Implementing cv from scratch
## shuffle the data
random_data <- dplyr::slice(modeling_data,sample(1:n()))
dim(random_data)
?seq
seq(1:nrow(modeling_data),by=nrow(modeling_data)/10)
seq(1,nrow(modeling_data),by=nrow(modeling_data)/10)
round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
test <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
test_idx
dim(modeling_data)
i <- 1
slice(random_data,test_idx[i]:test_idx[i+1])
dim(slice(random_data,test_idx[i]:test_idx[i+1]))
dim(slice(random_data,test_idx[2]:test_idx[2+1]))
test_idx[2]
test_idx[3]
slice(random_data,-test_idx[i]:-test_idx[i+1])
dim(slice(random_data,-test_idx[i]:-test_idx[i+1])_
dim(slice(random_data,-test_idx[i]:-test_idx[i+1])_
dim(slice(random_data,-test_idx[i]:-test_idx[i+1]))
dim(slice(random_data,test_idx[2]:test_idx[2+1]))
3247+362
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- predict(model_cv,data=test_data %>% select(-activity))
accuracy_score <- sum(predict_cv==test_data$activity)/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df
predict_cv
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,data=test_data %>% select(-activity)))
accuracy_score <- sum(predict_cv==test_data$activity)/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
predict_cv <- as.character(predict(model_cv,data=test_data %>% select(-activity)))
accuracy_score <- sum(predict_cv==test_data$activity)/nrow(test_data)
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,data=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
dim(test_data)
length(as.character(predict_cv))
?predict
predict_cv
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
length(as.character(predict_cv))
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
model_cv$AIC
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric(),AIC=as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score,AIC=model_cv$AIC))
}
accuracy_df
accuracy_df %>%
tidyr::gather(metric,value,2:3)
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric(),AIC=as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score,AIC=model_cv$AIC))
}
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric(),AIC=as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score,AIC=model_cv$AIC))
}
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()+facet_wrap(~metric,'free')
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/10))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric(),AIC=as.numeric())
for(i in 1:9){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score,AIC=model_cv$AIC))
}
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()+facet_wrap(~metric,scales = 'free')
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric(),AIC=as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score,AIC=model_cv$AIC))
}
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()+facet_wrap(~metric,scales = 'free')
test_idx
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
tidyr::gather(metric,value,2:3) %>%
ggplot(aes(x=iteration,y=value,color=metric))+
geom_line()+facet_wrap(~metric,scales = 'free')
?labs
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')
## Implementing cv from scratch
## shuffle the data
set.seed(42)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=round(iteration,0),y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')
## Implementing cv from scratch
## shuffle the data
set.seed(42)
scaleFUN <- function(x) sprintf("%.2f", x)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')+
scale_y_continuous(labels = scaleFUN)
## Implementing cv from scratch
## shuffle the data
set.seed(42)
scaleFUN <- function(x) sprintf("%.2f", x)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')+
scale_x_continuous(labels = scaleFUN)
## Implementing cv from scratch
## shuffle the data
set.seed(42)
scaleFUN <- function(x) sprintf("%.f", x)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')+
scale_x_continuous(labels = scaleFUN)
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')+
scale_x_continuous(labels = scaleFUN)+
theme(plot.title = element_text(hjust=-1))
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each ')+
scale_x_continuous(labels = scaleFUN)+
theme(plot.title = element_text(hjust=0.5))
## Implementing cv from scratch
## shuffle the data
set.seed(42)
scaleFUN <- function(x) sprintf("%.f", x)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each Iteration')+
scale_x_continuous(labels = scaleFUN)+
theme(plot.title = element_text(hjust=0.5))
## Implementing cv from scratch
## shuffle the data
set.seed(42)
scaleFUN <- function(x) sprintf("%.f", x)
random_data <- dplyr::slice(modeling_data,sample(1:n()))
test_idx <- round(seq(1,nrow(modeling_data),by=nrow(modeling_data)/11))
accuracy_df <- data.frame(iteration= as.numeric(),accruacy_score= as.numeric())
for(i in 1:10){
test_data <- slice(random_data,test_idx[i]:test_idx[i+1])
train_data <- slice(random_data,-test_idx[i]:-test_idx[i+1])
model_cv <- multinom(activity~.,data=train_data)
predict_cv <- as.character(predict(model_cv,newdata=test_data %>% select(-activity)))
accuracy_score <- sum(as.character(predict_cv)==as.character(test_data$activity))/nrow(test_data)
accuracy_df <- rbind(accuracy_df,data.frame(iteration=i,accuracy_score=accuracy_score))
}
accuracy_df %>%
ggplot(aes(x=iteration,y=accuracy_score))+
geom_line()+labs(x='Iteration Number',y='Accuracy Score',title='Accuracy Scores for each Iteration')+
scale_x_continuous(labels = scaleFUN)+
theme(plot.title = element_text(hjust=0.5))+
geom_point()
install.packages('mlogit')
?multinom
coeff_data <- broom::tidy(summary(model_logistic)$coefficients)
coeff_data
coeff_data <- broom::tidy(summary(model_logistic)$coefficients)
coeff_data_long <- coeff_data %>%
gather(variable,increase_in_log_odds,3:ncol(coeff_data))
coeff_data_long %>%
select(.rownames,variable,increase_in_log_odds) %>%
mutate(pos = ifelse(increase_in_log_odds>0,'Positive','Negative')) %>%
ggplot(aes(x=variable,y=increase_in_log_odds,fill=pos))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5))+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank(),
legend.title = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
coeff_data_long %>%
filter(increase_in_log_odds>0) %>%
select(.rownames,variable,increase_in_log_odds) %>%
ggplot(aes(x=variable,y=increase_in_log_odds))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5),fill='#cdcdb4')+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
coeff_data_long %>%
filter(increase_in_log_odds<0) %>%
select(.rownames,variable,increase_in_log_odds) %>%
ggplot(aes(x=variable,y=increase_in_log_odds))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5),fill='#b0585b')+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
coeff_data_long %>%
select(.rownames,variable,increase_in_log_odds) %>%
filter(variable %in% c('fBodyBodyGyroJerkMag.maxInds','tBodyAcc.correlation.X.Y','tBodyGyroJerk.arCoeff.Z.4','fBodyBodyGyroMag.maxInds')) %>%
mutate(pos = ifelse(increase_in_log_odds>=0,'Positive','Negative')) %>%
ggplot(aes(x=variable,y=increase_in_log_odds,fill=pos))+
geom_bar(stat='identity',width=0.4,position = position_dodge(width=0.5))+
facet_wrap(~.rownames,nrow=5)+
theme(axis.text.x=element_text(size=7,angle = 90),axis.text.y = element_blank(),panel.background = element_blank(),axis.ticks.y = element_blank())+
labs(x='Variable',y='Increase in Log Odds')
knitr::knit('anova_logistic_regression.Rmd')
data_raw$rn
print(dim(p_values_variables))
print(variables_needed_for_modeling)
library(nnet)
modeling_data$activity <- relevel(modeling_data$activity,ref='SITTING')
model_logistic <- multinom(activity~.,data=modeling_data)
broom::tidy(model_logistic)
test <- predict(model_logistic,data=modeling_data %>% select(-activity))
real_pred <- data.frame(real=modeling_data$activity,test=as.character(test))
caret::confusionMatrix(real_pred$real,real_pred$test)
caret::confusionMatrix(real_pred$real,real_pred$test)
